@page "/students-dynamic-columns"

@using Microsoft.AspNetCore.Components.QuickGrid
@using Xelit3.Playground.Blazor.QuickGrid.Models;
@using Xelit3.Playground.Blazor.QuickGrid.Services;


@inject StudentService studentService;

<h2>QuickGrid sample with dynamic columns</h2>

@if (!initialLoad)
{
    <select @onchange="@OnSubjectSelected">
        @foreach (var subject in subjects)
        {
            <option value="@subject.Id">@subject.Name</option>
        }
    </select>

    @if (!gridLoad)
    {
        <QuickGrid Items="@StudentsSubjectQualifications">
            @Columns()
        </QuickGrid>
    }
}


@code {

    private bool initialLoad = true;
    private bool gridLoad = true;
    private IEnumerable<DateTime> examDates = Enumerable.Empty<DateTime>();
    private IEnumerable<Student> students = Enumerable.Empty<Student>();
    private IEnumerable<Subject> subjects = Enumerable.Empty<Subject>();
    private IEnumerable<StudentSubjectQualifications> studentsSubjectQualifications = Enumerable.Empty<StudentSubjectQualifications>();

    private IQueryable<StudentSubjectQualifications> StudentsSubjectQualifications => studentsSubjectQualifications.AsQueryable();


    protected override void OnInitialized()
    {
        students = studentService.GetAll();
        subjects = students.SelectMany(x => x.Subjects).Distinct(SubjectComparer.Create()).ToList();
        initialLoad = false;
    }

    public void OnSubjectSelected(ChangeEventArgs args)
    {
        gridLoad = true;

        var subjectId = int.Parse(args.Value.ToString());
        var test = students.Select(x =>
        {
            var subject = x.Subjects.First(y => y.Id == subjectId);
            examDates = subject.Exams.Select(y => y.Date);

            return new StudentSubjectQualifications(x.Name, subject.QualificationAverage, subject.Exams);
        });

        gridLoad = false;
    }

    //TODO: Dynamic columns based on the qualifications. Each subject can have 'n' examns, so then columns must be dynamics
    private RenderFragment Columns() =>
        @<text>
            @if (studentsSubjectQualifications.Any())
            {
                <PropertyColumn TGridItem="StudentSubjectQualifications" TProp="string" Property="@(f => f.Name)" Sortable="true" />
                @foreach(var examDate in examDates)
                {
                    <PropertyColumn TGridItem="StudentSubjectQualifications" TProp="double" Property="@(f => f.Exams!.First(x => x.Date == examDate).Qualification)" Sortable="true" />
                }
            }
        </text>;

}
